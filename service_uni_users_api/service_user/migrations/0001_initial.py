# Generated by Django 4.2.5 on 2023-09-26 01:46

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PhoneContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_contact', models.CharField(max_length=25)),
                ('phone_type', models.CharField(choices=[('MOBILE', 'MOBILE'), ('HOME', 'HOME'), ('WORK', 'WORK')], default='MOBILE', max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('slug', models.SlugField(max_length=600)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceUserType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(choices=[('ADMIN', 'ADMIN'), ('MANAGEMENT', 'MANAGEMENT'), ('STAFF', 'STAFF'), ('STUDENT', 'STUDENT')], default='STUDENT', max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('slug', models.SlugField(max_length=600)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateField(blank=True, null=True)),
                ('programs', models.ManyToManyField(to='service_user.program')),
                ('subjects', models.ManyToManyField(to='service_user.subject')),
            ],
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=225)),
                ('website', models.URLField()),
                ('street_address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('email_domain', models.CharField(max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateField(blank=True, null=True)),
                ('contact_phone', models.ManyToManyField(to='service_user.phonecontact')),
                ('programs', models.ManyToManyField(to='service_user.program')),
                ('schools', models.ManyToManyField(to='service_user.school')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('u_id', models.CharField(blank=True, editable=False, max_length=5, null=True, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('street_address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('gender', models.CharField(choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE'), ('OTHERS', 'OTHERS')], default='MALE', max_length=6)),
                ('passport_photo', models.ImageField(blank=True, null=True, upload_to='passport/')),
                ('user_type', models.CharField(choices=[('ADMIN', 'ADMIN'), ('MANAGEMENT', 'MANAGEMENT'), ('STAFF', 'STAFF'), ('STUDENT', 'STUDENT')], default='STUDENT', max_length=10)),
                ('student_type', models.CharField(blank=True, choices=[('PG', 'PG'), ('UG', 'UG')], default='UG', max_length=2, null=True)),
                ('current_level', models.CharField(blank=True, choices=[('100', '100'), ('200', '200'), ('300', '300'), ('400', '400'), ('500', '500'), ('600', '600'), ('700', '700'), ('800', '800'), ('900', '900')], default='100', max_length=3, null=True)),
                ('student_status', models.CharField(blank=True, choices=[('FUTURE_STUDENT', 'FUTURE_STUDENT'), ('CURRENT_STUDENT', 'CURRENT_STUDENT'), ('GRADUATE', 'GRADUATE')], max_length=16, null=True)),
                ('coe', models.CharField(blank=True, max_length=20, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('contact_phone', models.ManyToManyField(to='service_user.phonecontact')),
                ('current_course_handling', models.ManyToManyField(related_name='courses_staff_handling', to='service_user.subject')),
                ('current_enrolled_courses', models.ManyToManyField(related_name='student_enrolled_subjects', to='service_user.subject')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('institution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_user.institution')),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='service_user.program')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='service_user.school')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
